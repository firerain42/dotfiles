# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly (cf. scope.sh).
set ifs "\n"

# preview files using scope.sh
set previewer ~/.config/lf/scope.sh

# leave some space at the top and the bottom of the screen
set scrolloff 10

# activate incremental search
set incsearch

# use enter for shell commands
map <enter> open

# execute current file (must be executable)
map x $$f
map X !$f

# show log file
map ` $less /tmp/lf.${USER}.${id}.log

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --dereference --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$f\n"
    printf "delete? [y]/n "
    read ans
    if [ "$ans" = "y" ] || [ -z $ans ]; then
        rm -rf $f
    fi
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete

# Improve paste to work if files are moved between different devices
cmd paste %{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
        cp -r $list .
    elif [ $mode = 'move' ]; then
        mv $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

# Change directory or select file(s) using fzf
cmd fzf ${{

    if ! hash fzf 2> /dev/null; then
        lf -remote "send $id echomsg \"fzf not installed\""
        exit
    fi

    res="$(find $(pwd) | fzf --multi)"
    if [ -d "$res" ]; then
        lf -remote "send $id cd \"$res\""
    elif [ -f "$res" ]; then
        lf -remote "send $id select \"$res\""
    else
        for selected_file in "$res"; do
            lf -remote "send $id select \"$selected_file\""
            lf -remote "send $id toggle"
        done
    fi
}}

map <c-f> :fzf


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


# shortcuts for common directories
map g/ cd /
map gt cd /tmp
map gd cd /data
map gm cd /mnt
map gp cd ~/Projects

# make y behave more like ranger
cmd yank-filename ${{
    clip_content="$(echo -n $(basename $f))"
    tmux set-buffer "$clip_content"
    echo "$clip_content" | xclip -selection clipboard 2> /dev/null
}}
cmd yank-filepath ${{
    clip_content="$(echo -n $f)"
    tmux set-buffer "$clip_content"
    echo "$clip_content" | xclip -selection clipboard 2> /dev/null
}}
cmd yank-parentpath ${{
    clip_content="$(echo -n $(dirname  $f))"
    tmux set-buffer "$clip_content"
    echo "$clip_content" | xclip -selection clipboard 2> /dev/null
}}
map y
map yy copy
map yn yank-filename
map yp yank-filepath
map yP yank-parentpath

# R for reload
map R reload
