#!/usr/bin/env python3

import sys
import os
import subprocess
import tempfile
import textwrap
import argparse
from pathlib import Path



def main():
    parser = argparse.ArgumentParser(description=textwrap.dedent('''
        Editing of ad-hoc shell scripts.

        Creates a new shell script by opening the editor and executing it afterwards.
        It is also possible to pipe text to this program which can then be edited.'''))
    parser.add_argument('--shell', '-s', type=str, default=None,
            help="Program which is used to execute the shell script")
    parser.add_argument('--editor', '-e', type=str, default=None,
            help="Program which is used to edit the shell script")
    parser.add_argument('--script_path', '-o', type=Path, default=None,
            help="Path of the output script. If not specified a temporary file will be created and deleted on exit.")
    parser.add_argument('--assume-yes', '-y', action='store_true',
            help="Assume yes for all questions, i.e., always use default answer.")

    args = parser.parse_args()

    if args.editor is None:
        args.editor = os.getenv('EDITOR', 'vim')

    if args.shell is None:
        args.shell = os.getenv('SHELL', 'sh')

    # Piping
    if not sys.stdin.isatty():
        in_txt = sys.stdin.read()
    else:
        in_txt = ''

    if args.script_path is None:
        (_fd, script_path) = tempfile.mkstemp()
        script_path = Path(script_path)
        delete_script = True
    else:
        script_path = args.script_path
        delete_script = False


    script_path.write_text(in_txt)

    subprocess.call([args.editor, str(script_path)])

    script_txt = script_path.read_text()

    if args.assume_yes or ask_for_permission(f"Execute script with {args.shell}?"):
        subprocess.run([args.shell], input=script_txt, encoding="utf-8")

    if delete_script:
        script_path.unlink()

def ask_for_permission(question):
    print(question)

    while True:
        print("[y]/n: ", end='', flush=True)
        answer = sys.stdin.readline().strip() # currently buggy when piping input

        if answer in ['y', '']:
            return True
        elif answer == 'n':
            return False






if __name__ == '__main__':
    main()
