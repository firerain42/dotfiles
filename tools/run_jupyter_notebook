#!/usr/bin/env python3

import argparse
from pathlib import Path

import nbformat
from nbconvert.preprocessors import ExecutePreprocessor

"""Runs a Jupyter notebook and inserts the given parameters"""

def run_jupyter(args):
    output_notebook_file: Path = args['output_notebook_file']
    input_notebook_file: Path = args['input_notebook_file']

    if args['insert_code_file'] is not None:
        insert_str = args['insert_code_file'].read_text()
    elif args['insert_code'] is not None:
        insert_str = args['insert_code']
    else:
        raise ValueError('Either insert_code or insert_code_file must not be None.')

    print('insertion text:')
    print(insert_str)

    # Load notebook
    with input_notebook_file.open('r') as notebook_file:
        nb = nbformat.read(notebook_file, as_version=4)

    cell_index = [cell_index for cell_index, cell in enumerate(nb.cells) if hasattr(cell, 'source') and args['cell_identifier_str'] in cell.source]
    assert len(cell_index) == 1, "cell could not be indentified. Found {len(cell_index)} cells with cell identifier string."
    cell_index = cell_index[0]

    print('insertion cell index:', cell_index)

    # Patch notebook
    nb.cells[cell_index].source = insert_str

    # Run notebook
    print('running notebook ...')
    ep = ExecutePreprocessor(timeout=-1, allow_errors=True)
    ep.preprocess(nb, {'metadata': {'path': str(output_notebook_file.parent.absolute())}})

    # Save results
    print('writing notebook ...')
    with (output_notebook_file).open('wt') as f:
        nbformat.write(nb, f)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Runs a Jupyter notebook and inserts the given parameters")
    parser.add_argument("--input_notebook_file", type=Path, required=True, help="path of the input Jupyter notebook")
    parser.add_argument("--output_notebook_file", type=Path, default=None, help="path of the output Jupyter notebook")
    parser.add_argument("--cell_identifier_str", default='### INSERT_PARAMS ###' , help="string with which the insertion "
            "cell is identified. Must be unique. [default: '### INSERT_PARAMS ###']")

    parser.add_argument("--insert_code", default=None, help="code which will be inserted")
    parser.add_argument("--insert_code_file", type=Path, default=None, help="path of a file containing the code which will be inserted")

    args = parser.parse_args()

    run_jupyter(vars(args))
